#!/usr/bin/env python


if __name__ == '__main__':
    import sys
    from optparse import OptionParser
    from application.process import process, ProcessError
    from application.configuration import ConfigFile, datatypes
    from application import log
    import mediaproxy

    name = 'media-dispatcher'
    fullname = 'MediaProxy Dispatcher'
    description = 'MediaProxy Dispatcher component'

    process.configuration.user_directory = None
    process.configuration.subdirectory = mediaproxy.mediaproxy_subdirectory
    process.runtime.subdirectory = mediaproxy.mediaproxy_subdirectory

    default_pid = process.runtime.file('{}.pid'.format(name))

    parser = OptionParser(version="%%prog %s" % mediaproxy.__version__)
    parser.add_option("--no-fork", action="store_false", dest="fork", default=1, help="run the process in the foreground (for debugging)")
    parser.add_option("--pid", dest="pid_file", default=default_pid, help="pid file (%s)" % default_pid, metavar="File")
    (options, args) = parser.parse_args()

    log.Formatter.prefix_format = '{record.levelname:<8s} '

    config_file = ConfigFile(mediaproxy.configuration_file)
    log.level.current = config_file.get_setting('Dispatcher', 'log_level', type=datatypes.LogLevel, default=log.level.DEBUG)

    try:
        process.runtime.create_directory()
    except ProcessError as e:
        log.critical('Cannot start %s: %s' % (fullname, e))
        sys.exit(1)

    if options.fork:
        try:
            process.daemonize(options.pid_file)
        except ProcessError as e:
            log.critical('Cannot start %s: %s' % (fullname, e))
            sys.exit(1)
        log.use_syslog(name)

    log.info('Starting %s %s' % (fullname, mediaproxy.__version__))

    from mediaproxy.dispatcher import Dispatcher

    if not options.fork:
        from application.debug.memory import memory_dump

    try:
        dispatcher = Dispatcher()
    except Exception as e:
        log.critical('Failed to create %s: %s' % (fullname, e))
        if type(e) is not RuntimeError:
            log.exception()
        sys.exit(1)

    dispatcher.run()

    if not options.fork:
        #from application.debug.memory import memory_dump
        memory_dump()
